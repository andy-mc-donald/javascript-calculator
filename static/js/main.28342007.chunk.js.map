{"version":3,"sources":["Display.js","Buttons.js","App.js","serviceWorker.js","index.js"],"names":["Display","inputText","currentText","id","Buttons","numClick","clearAll","operatorClick","minusClick","decimalClick","equalsClick","type","value","onClick","App","useState","inputString","setInputString","inputCurrent","setInputCurrent","lastInput","setLastInput","e","num","target","length","op","prev","deductLastTwo","slice","deductLast","min","dec","includes","eq","prev1","prev2","sum","math","Function","deductLast2","answer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.28342007.chunk.js","sourcesContent":["import React from 'react';\n\nconst Display = ({inputText, currentText}) => {\n    return (\n       <div id=\"display-container\">\n        <h4 id=\"display-upper-line\">{inputText}</h4>\n        <h2 id=\"display\">{currentText}</h2> \n       </div> \n    )\n  }\n\n  export default Display;","import React from 'react';\n\nconst Buttons = ({ numClick, clearAll, operatorClick, minusClick, decimalClick, equalsClick }) => {\n    return (\n      <div id=\"buttons-container\">\n        <input id=\"clear\" type=\"button\" value=\"Clear\" onClick={clearAll} />\n        <input id=\"divide\" type=\"button\" value=\"/\" onClick={operatorClick} />\n        <input id=\"seven\" type=\"button\" value=\"7\" onClick={numClick} />\n        <input id=\"eight\" type=\"button\" value=\"8\" onClick={numClick} />\n        <input id=\"nine\" type=\"button\" value=\"9\" onClick={numClick} />\n        <input id=\"multiply\" type=\"button\" value=\"*\" onClick={operatorClick} />\n        <input id=\"four\" type=\"button\" value=\"4\" onClick={numClick} />\n        <input id=\"five\" type=\"button\" value=\"5\" onClick={numClick} />\n        <input id=\"six\" type=\"button\" value=\"6\" onClick={numClick} />\n        <input id=\"subtract\" type=\"button\" value=\"-\" onClick={minusClick} />\n        <input id=\"one\" type=\"button\" value=\"1\" onClick={numClick} />\n        <input id=\"two\" type=\"button\" value=\"2\" onClick={numClick} />\n        <input id=\"three\" type=\"button\" value=\"3\" onClick={numClick} />\n        <input id=\"add\" type=\"button\" value=\"+\" onClick={operatorClick} />\n        <input id=\"zero\" type=\"button\" value=\"0\" onClick={numClick} />\n        <input id=\"decimal\" type=\"button\" value=\".\" onClick={decimalClick} />\n        <input id=\"equals\" type=\"button\" value=\"=\" onClick={equalsClick} />\n      </div>  \n    )  \n  }\n\n  export default Buttons;","import React, { useState } from \"react\";\nimport Display from \"./Display\";\nimport Buttons from \"./Buttons\";\nimport \"./App.css\";\n\nconst App = () => {\n  //inputString is the full calculation string (displayed on the top line of calculator)\n  //inputCurrent is the current input (displayed on the second, main line of the calculator)\n  //lastInput tracks the last keypress and is not displayed anywhere\n  const [inputString, setInputString] = useState(\" \");\n  const [inputCurrent, setInputCurrent] = useState(\"0\");\n  const [lastInput, setLastInput] = useState(\"\");\n\n  //IF YOU CLICK A NUMBER LOGIC...\n  const handleNumClick = (e) => {\n    let num = e.target.value;\n    let length = inputCurrent.length;\n    //setInputString\n    if ((inputCurrent === \"0\" && num === \"0\") || length >= 30) {\n      return;\n    }\n    if (lastInput === \"=\") {\n      setInputString(num);\n    } \n    else {\n      setInputString(inputString + num);\n    }\n    //setInputCurrent\n    if (length >= 30) {\n      return;\n    }\n    if (inputCurrent === \"0\") {\n      setInputCurrent(num);\n    }\n    if (\n      lastInput === \"+\" ||\n      lastInput === \"/\" ||\n      lastInput === \"*\" ||\n      lastInput === \"\" ||\n      lastInput === \"-\" ||\n      lastInput === \"=\"\n    ) {\n      setInputCurrent(num);\n    } else {\n      setInputCurrent(inputCurrent + num);\n    }\n    //setLastInput\n    setLastInput(num);\n  };\n\n  //IF YOU CLICK AN OPERATOR KEY (+, /, *) LOGIC\n  const handleOperator = (e) => {\n    let op = e.target.value;\n    let prev = inputString[inputString.length - 2];\n\n    //setInputString\n    if (lastInput === \"\" || inputString === \" -\") {\n      return;\n    } else if (lastInput === \"=\") {\n      setInputString(inputCurrent + op);\n    } else if (\n      (lastInput === \"-\" && prev === \"+\") ||\n      (lastInput === \"-\" && prev === \"/\") ||\n      (lastInput === \"-\" && prev === \"*\")\n    ) {\n      let deductLastTwo = inputString.slice(0, inputString.length - 2);\n      setInputString(deductLastTwo + op);\n    } else if (\n      lastInput === \"+\" ||\n      lastInput === \"/\" ||\n      lastInput === \"*\" ||\n      lastInput === \"-\"\n    ) {\n      let deductLast = inputString.slice(0, inputString.length - 1);\n      setInputString(deductLast + op);\n    } else {\n      setInputString(inputString + op);\n    }\n    //setting inputCurrent and lastInput\n    setInputCurrent(op);\n    setLastInput(op);\n  };\n\n  //IF YOU CLICK MINUS KEY LOGIC\n  const handleMinus = (e) => {\n    let min = e.target.value;\n    if (lastInput === \"-\") {\n      return;\n    }\n\n    if (lastInput === \"=\") {\n      setInputString(inputCurrent + min);\n    } else {\n      setInputString(inputString + min);\n    }\n\n    setInputCurrent(min);\n    setLastInput(min);\n  };\n\n  // IF YOU CLICK DECIMAL LOGIC\n  const handleDecimal = (e) => {\n    let dec = e.target.value;\n\n    //setInputCurrent\n    if (lastInput === \"=\" || inputCurrent.includes(\".\")) {\n      return;\n    } if (\n      inputCurrent === \"+\" ||\n      inputCurrent === \"/\" ||\n      inputCurrent === \"*\" ||\n      inputCurrent === \"-\"\n    ) {\n      setInputCurrent(\"0.\");\n    } else {\n      setInputCurrent(inputCurrent + dec);\n    }\n    //setInputString\n    if (\n      lastInput === \"+\" ||\n      lastInput === \"/\" ||\n      lastInput === \"*\" ||\n      lastInput === \"\" ||\n      lastInput === \"-\"\n    ) {\n      setInputString(inputString + \"0.\");\n    } else {\n      setInputString(inputString + dec);\n    }\n    //setLastInput\n    setLastInput(dec);\n  };\n\n  //IF YOU PRESS EQUALS LOGIC\n  const handleEquals = (e) => {\n    let eq = e.target.value;\n    let prev1 = inputString[inputString.length - 1];\n    let prev2 = inputString[inputString.length - 2];\n\n    //This function works out the sum:\n    let sum = (math) => {\n      return Function(`return (${math})`)();\n    };\n    if (lastInput === eq || lastInput === \"\" || inputString === \" -\") {\n      return;\n    }\n    if (prev2 === \"+\" || prev2 === \"/\" || prev2 === \"*\") {\n      let deductLast2 = inputString.slice(0, inputString.length - 2);\n      let answer = sum(deductLast2);\n      setInputString(deductLast2 + eq + answer);\n      setInputCurrent(answer);\n      setLastInput(eq);\n    }\n    if (prev1 === \"+\" || prev1 === \"/\" || prev1 === \"*\" || prev1 === \"-\") {\n      let deductLast = inputString.slice(0, inputString.length - 1);\n      let answer = sum(deductLast);\n      setInputString(deductLast + eq + answer);\n      setInputCurrent(answer);\n      setLastInput(eq);\n    } else {\n      let answer = sum(inputString);\n      setInputString(inputString + eq + answer);\n      setInputCurrent(answer);\n      setLastInput(eq);\n    }\n  };\n\n  //IF YOU PRESS THE CLEAR BUTTON LOGIC\n  const handleClear = () => {\n    setInputString(\" \");\n    setInputCurrent(\"0\");\n    setLastInput(\"\");\n  };\n\n  return (\n    <div id=\"container\">\n      <div id=\"calculator\">\n        <Display inputText={inputString} currentText={inputCurrent} />\n        <Buttons\n          numClick={handleNumClick}\n          operatorClick={handleOperator}\n          minusClick={handleMinus}\n          decimalClick={handleDecimal}\n          clearAll={handleClear}\n          equalsClick={handleEquals}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}